function p = defineVisuals(p)

% p = defineVisuals(p)
%
% Define fixation location in pixels, define fixation window width / height
% in pixels, make the grid of lines (for experimenter display). Also define
% the color of the fixation window depending on the trial type. If it's a
% "release on fixation offset" trial, make the fixation window one color,
% if it's not, make it another color

% fixation window width and height in pixels.
p.draw.fixWinWidthPix       = pds.deg2pix(p.trVars.fixWinWidthDeg, p);
p.draw.fixWinHeightPix      = pds.deg2pix(p.trVars.fixWinHeightDeg, p);

% make grid with "gridSpace" degree spacing
gridX           = pds.deg2pix(-30:p.draw.gridSpacing:30, p) + ...
    p.draw.middleXY(1);
gridY           = pds.deg2pix(-20:p.draw.gridSpacing:20, p) + ...
p.draw.middleXY(2);

p.draw.gridXY   = [];
for i = 1:length(gridX)
    p.draw.gridXY = [p.draw.gridXY, ...
        [gridX(i), gridX(i); gridY(1), gridY(end)]]; ... % vertical lines
end
for i = 1:length(gridY)
    p.draw.gridXY = [p.draw.gridXY, ...
        [gridX(1), gridX(end); gridY(i), gridY(i)]]; ... % vertical lines
end

% Set fixation window color depending on trial type for experimenter
% display:
% Orange for peripheral stimulus change + dim
% Red for peripheral stimulus change + NO DIM
% Blue for no change
if p.trVars.isStimChgNoDim
    p.draw.color.fixWin         = p.draw.clutIdx.expRed_subBg;
elseif p.trVars.isStimChangeTrial
    p.draw.color.fixWin         = p.draw.clutIdx.expOrange_subBg;
else
    p.draw.color.fixWin         = p.draw.clutIdx.expBlue_subBg;
end

% define "main" cue color depending on reward magnitude; for now just one
% value because we haven't yet incorporated reward magnitude variation:
p.draw.color.cueRing = p.draw.clutIdx.expRwdBlue_subRwdBlue;

% Define the starts and ends of the colored and grey portions of the cue
% ring. We want the grey portion facing "inward" so it's always similarly
% visible to the monkey regardless of its position. To do this we need to
% know the angle of elevation of the cued location. We have to translate
% from the usual definition of angles (relative to the positive x-axis) to
% the PTB definition (relative to the positive y axis). We also need to
% define the arc angle of the grey proportion of the cue ring.
cueAngle = p.trVars.stimElevs(p.stim.cueLoc) - 90;
greyPropAngle = 360 * (1 - p.draw.cueArcProp);

% define "z" the opposite direction from the cue angle:
z = 180 + cueAngle;

% define cue arc angles:
p.draw.cueArcAngles = [

keyboard


end