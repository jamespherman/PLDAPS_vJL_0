function p = nextParams(p)
%
% p = nextParams(p)
%
% Define parameters for upcoming trial.

% if we're using p.init.trialsArray to determine target locations, do the
% book keeping for that here:
if p.trVars.setTargLocViaTrialArray
    p = chooseRow(p);
end

% Trial type information:
% vis- or mem-guided saccade
p = trialTypeInfo(p);

% set fixation and target locations for next trial:
p = setLocations(p);

% Timing info:
% target onset/offset time
p = timingInfo(p);

end

function p = redefClut(p)

% what color do we want to make "invisible" to the monkey.
bgRGB = p.draw.clut.combinedClut(p.draw.color.background+1, :);

% redefine CLUT using current background color:

mutGreen = [0.5 0.9 0.4];
redISH = [225 0 76]/255;
orangeISH = [255 146 0]/255;
blueISH = [11 97 164]/255;
greenISH = [112 229 0]/255;
oldGreen = [0.45, 0.63, 0.45];
visGreen = [0.1 0.9 0.1];
memMagenta = [1 0 1];
% colors for exp's display
% black 0
% grey-1 (grid-lines) 1
% grey-2 (background) 2
% grey-3 (fix-window) 3
% white (fix-point) 4
% red 5
% orange 6
% blue 7
% cue ring 8
% muted green (fixation) 9
p.draw.clut.expColors = ...
    [ 0, 0, 0; % 0
    0.25, 0.25, 0.25; % 1
    bgRGB; % 2
    0.7, 0.7, 0.7; % 3
    1, 1, 1; % 4
    redISH; % 5
    orangeISH; % 6
    blueISH; % 7
    0, 1, 1; % 8
    0.9,0.9,0.9; % 9
    mutGreen; % 10
    greenISH; % 11
    0, 0, 0; % 12
    oldGreen; % 13
    visGreen; % 14
    memMagenta; % 15
    0, 1, 1; % 16
    p.draw.clut.combinedClut(18:25,:)]; % 17-24

% colors for subject's display
% black 0
% grey-2 (grid-lines) 2
% grey-2 (background) 2
% grey-2 (fix-window) 3
% white (fix-point) 4
% grey-2 (red) 2
% grey-2 (green) 2
% grey-2 (blue) 2
% cuering 8
% muted green (fixation) 9
p.draw.clut.subColors = ...
    [0, 0, 0; % 0
    bgRGB; % 1
    bgRGB; % 2
    bgRGB; % 3
    1, 1, 1; % 4
    bgRGB; % 5
    bgRGB; % 6
    bgRGB; % 7
    0, 1, 1; % 8
    bgRGB; % 9
    mutGreen; % 10
    bgRGB; % 11
    bgRGB; % 12
    oldGreen; % 13
    bgRGB; % 14
    bgRGB; % 15
    bgRGB; % 16
    p.draw.clut.combinedClut(18:25,:)]; % 17-24

% fill the remaining LUT slots with background RGB.
nColors         = size(p.draw.clut.subColors,1);
nTotalColors    = 256;
p.draw.clut.expColors(nColors+1:nTotalColors, :) = ...
    repmat(bgRGB, nTotalColors-nColors, 1);
p.draw.clut.subColors(nColors+1:nTotalColors, :) = ...
    repmat(bgRGB, nTotalColors-nColors, 1);

% populate the rest with 0's
p.draw.clut.ffc      = nColors + 1;
p.draw.clut.expCLUT  = p.draw.clut.expColors;
p.draw.clut.subCLUT  = p.draw.clut.subColors;

% Push (possibly new) color look-up table to ViewPIXX based on
% current frame (frame determined based on time in trial).
% Screen('LoadNormalizedGammaTable', p.draw.window, ...
%     [p.draw.clut.subCLUT; p.draw.clut.expCLUT], 2);

Datapixx('SetVideoClut', [p.draw.clut.subCLUT; p.draw.clut.expCLUT]);

end

%
function p = trialTypeInfo(p)

% decide whether this will be a visually or memory guided saccade:
if rand() <= p.trVars.propVis
    p.trVars.isVisSac = 1;
else
    p.trVars.isVisSac = 0;
end

% assuming we're using the trials array, determine which stimulus
% configuration (target and background color) we're using in this trial:
if p.trVars.setTargLocViaTrialArray
    p.trVars.stimConfigIdx = p.init.trialsArray(...
        p.trVars.currentTrialsArrayRow, ...
    strcmp(p.init.trialArrayColumnNames, 'tgtBkgndCond'));
else
    p.trVars.stimConfigIdx = randi(8);
end

% define colors of backround and target for upcoming trial:
switch p.trVars.stimConfigIdx
    case 1 % "high" saliency
        c1 = p.draw.clutIdx.dkl_0;
        c2 = p.draw.clutIdx.dkl_180;

    case 2 % "high" saliency
        c1 = p.draw.clutIdx.dkl_180;
        c2 = p.draw.clutIdx.dkl_0;

    case 3 % "high" saliency
        c1 = p.draw.clutIdx.dkl_90;
        c2 = p.draw.clutIdx.dkl_270;

    case 4 % "high" saliency
        c1 = p.draw.clutIdx.dkl_270;
        c2 = p.draw.clutIdx.dkl_90;

    case 5 % "low" saliency
        c1 = p.draw.clutIdx.dkl_0;
        c2 = p.draw.clutIdx.dkl_45;

    case 6 % "low" saliency
        c1 = p.draw.clutIdx.dkl_90;
        c2 = p.draw.clutIdx.dkl_135;

    case 7 % "low" saliency
        c1 = p.draw.clutIdx.dkl_180;
        c2 = p.draw.clutIdx.dkl_225;

    case 8 % "low" saliency
        c1 = p.draw.clutIdx.dkl_270;
        c2 = p.draw.clutIdx.dkl_315;
end

p.draw.color.targ       = c1;
p.draw.color.background = c2;
p.draw.color.fix          = p.draw.color.background;
p.draw.color.fixWin       = p.draw.color.background;

% redefine CLUT and upload to VIEWPixx:
p = redefClut(p);

end


% function p = setTargetLocation(p)
% --- Final setLocations Subfunction ---
function p = setLocations(p)

% Convert base location to polar coordinates for easy rotation
[theta_rad, r] = cart2pol(p.trVars.targDegX, p.trVars.targDegY);

% --- Determine rotation direction based on quadrant ---
% If signs of X and Y are the same (upper-right or lower-left quadrants),
% the rotation is clockwise. Otherwise, it's counter-clockwise.
if sign(p.trVars.targDegX) == sign(p.trVars.targDegY)
    rotation_deg = -90; % Clockwise
else
    rotation_deg = 90;  % Counter-clockwise
end
rotation_rad = deg2rad(rotation_deg);

% --- Define the four potential target locations by rotation ---
locations = zeros(4, 2);
for i = 1:4
    % Rotation angles are 0, 1, 2, and 3 steps of the rotation amount
    current_rotation = theta_rad + ( (i-1) * rotation_rad );
    [x, y] = pol2cart(current_rotation, r);
    locations(i, :) = [x, y];
end

% Get the target location index for the current trial
locIdxCol = strcmp(p.init.trialArrayColumnNames, 'targetLocIdx');
currentTargetLocIdx = p.init.trialsArray(...
    p.trVars.currentTrialsArrayRow, locIdxCol);

% Set the final target position for this trial
currentTargDeg = locations(currentTargetLocIdx, :);
p.trVars.targDegX = currentTargDeg(1);
p.trVars.targDegY = currentTargDeg(2);

% --- Convert to pixels and strobe values (this logic is preserved) ---
p.draw.fixPointPix  = p.draw.middleXY + [1, -1] .* ...
    pds.deg2pix([p.trVars.fixDegX, p.trVars.fixDegY], p);
p.draw.targPointPix = p.draw.middleXY + [1, -1] .* ...
    pds.deg2pix([p.trVars.targDegX, p.trVars.targDegY], p);

[tmpTheta, tmpRadius] = cart2pol(p.trVars.targDegX, p.trVars.targDegY);
p.trVars.targTheta_x10  = round(mod(rad2deg(tmpTheta), 360) * 10);
p.trVars.targRadius_x100 = round(tmpRadius * 100);

end

%
function p = timingInfo(p)

% time of target onset wrt fixAcq:
p.trVars.timeTargOnset       = unifrnd(p.trVars.targOnsetMin, ...
    p.trVars.targOnsetMax);

% time of target offset wrt fixAcq:
% This is always a memory-guided saccade task with a fixed flash duration.
p.trVars.timeTargOffset = p.trVars.timeTargOnset + ...
    p.trVars.targetFlashDuration;

% time of fix offset wrt fix acquired:
p.trVars.timeFixOffset      = p.trVars.timeTargOnset + ...
    unifrnd(p.trVars.goTimePostTargMin, p.trVars.goTimePostTargMax);

% target fixation duration required
p.trVars.targHoldDuration =  unifrnd(p.trVars.targHoldDurationMin, ...
    p.trVars.targHoldDurationMax);

% --- timingInfo subfunction (inside nextParams.m) ---
% ... (top part of the function is unchanged) ...

% time of target offset wrt fixAcq:
% This is always a memory-guided saccade task with a fixed flash duration.
p.trVars.timeTargOffset = p.trVars.timeTargOnset + ...
    p.trVars.targetFlashDuration;

% ... (timeFixOffset and targHoldDuration are unchanged) ...

% reward duration depends on whether this is a "high" or "low" reward trial.
rewardCol = strcmp(p.init.trialArrayColumnNames, 'reward');
if p.init.trialsArray(p.trVars.currentTrialsArrayRow, rewardCol) == 1
    p.trVars.rewardDurationMs = p.trVars.rewardDurationHigh;
else
    p.trVars.rewardDurationMs = p.trVars.rewardDurationLow;
end

end

% --- Simplified chooseRow Subfunction ---
function p = chooseRow(p)

% On the first trial, initialize the half-block counter
if isempty(p.trVars.currentTrialsArrayRow)
    p.trVars.halfBlockToCheck = 1;
end

% Find all possible trials for the current half-block
col_hb = strcmp(p.init.trialArrayColumnNames, 'halfBlock');
trialsPossible = p.status.trialsArrayRowsPossible & p.init.trialsArray(:, col_hb) == p.trVars.halfBlockToCheck;

% If no trials are left in this half-block, advance the counter and try again
if ~any(trialsPossible)
    p.trVars.halfBlockToCheck = p.trVars.halfBlockToCheck + 1;
    trialsPossible = p.status.trialsArrayRowsPossible & p.init.trialsArray(:, col_hb) == p.trVars.halfBlockToCheck;
end

% If no trials are left in the whole experiment, exit
if ~any(trialsPossible)
    p.trVars.exitWhileLoop = true;
    p.pldaps.finish = true;
    return;
end

% Select one of the possible trials for this half-block at random
choicePool = find(trialsPossible);
p.trVars.currentTrialsArrayRow = choicePool(randi(length(choicePool)));

end

%
function y = shuff(x)
    y = x(randperm(length(x)));
end

function r = getRadius(theta, a, bX, bY)

% Choose radius to lie in a rectangular annulus with inner "radius" = a and
% outer radius = b, depending on angle. First step is calculating a
% "special case" angle because the annulus is rectangular.
spAng = atand(bY/bX);

% There are several cases for ranges of theta; I suspect there's a way to
% do this more cleanly / simply. Let's see what LNK has to say tomorrow!
if (theta > (360 - spAng) || theta <= spAng) || ...
        (theta > (180 - spAng) && theta <= (180 + spAng))
    r = abs((a./cosd(theta)) + ...
        rand*((bX./cosd(theta)) - (a./cosd(theta))));
elseif (theta > spAng && theta <= 45)
    r = abs((a./cosd(theta)) + ...
        rand*((bY./sind(theta)) - (a./cosd(theta))));
elseif (theta > 135 && theta <= (180 - spAng))
    r = abs(-(a./cosd(theta)) + ...
        rand*((bY./sind(theta)) + (a./cosd(theta))));
elseif (theta > (180 + spAng) && theta <= 225)
    r = abs(-(a./cosd(theta)) + ...
        rand*(-(bY./sind(theta)) + (a./cosd(theta))));
elseif (theta > 315 && theta <= (270 + spAng))
    r = abs((a./cosd(theta)) + ...
        rand*(-(bY./sind(theta)) - (a./cosd(theta))));
else
    r = abs((a./sind(theta)) + ...
        rand*((bY./sind(theta)) - (a./sind(theta))));
end

end