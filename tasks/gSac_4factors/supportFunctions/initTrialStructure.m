function p = initTrialStructure(p)
%
% p = initTrialStructure(p)
% 
% Define the trial types for a single "block" of trials.

% --- 1. Define column descriptions ---
% This needs to match the columns generated by our recipe table functions.
p.init.trialArrayColumnNames = {'halfBlock', 'targetLocIdx', ...
    'stimType', 'salience', 'reward', 'targetColor', 'numTrials', ...
    'trialCode'};

% --- 2. Get the recipe table based on the experiment type ---
switch p.init.exptType
        
    case 'gSac_4factors'
        % This is our new experiment type
        table = fourFactorsTable;
        
    otherwise
        error('p.init.exptType is not valid');
end          

% --- 3. Expand the recipe table into the final trialsArray ---
% This generic expansion logic remains untouched and works for any recipe table.
nCols = length(p.init.trialArrayColumnNames);
p.init.trialsArray = zeros(sum(table(:, nCols - 1)), nCols);
currentRow = 1;

% loop over each row of the table.
for i = 1:size(table, 1)
    % how many repetitions of the current row do we need?
    nReps = table(i, contains(p.init.trialArrayColumnNames, 'numTrials'));
    
    if nReps > 0
        % place the repeated row into the "trials" array
        p.init.trialsArray(currentRow:(currentRow + nReps - 1), :) = ...
            repmat(table(i, :), nReps, 1);

        % update the currentRow variable
        currentRow = currentRow + nReps;
    end
end

% --- 4. Shuffle trials within each block ---
% This ensures trial order is randomized but blocks are respected.
nTrials = size(p.init.trialsArray, 1);
nBlocks = p.init.trialsArray(end, 1) / 2; % Assumes 2 half-blocks per block
nTrialsPerBlock = nTrials / nBlocks;

shuffledArray = [];
for i_block = 1:nBlocks
    block_start_row = (i_block - 1) * nTrialsPerBlock + 1;
    block_end_row = i_block * nTrialsPerBlock;
    
    current_block_trials = p.init.trialsArray(block_start_row:block_end_row, :);
    
    % shuffle the rows of the current block
    shuffled_block = current_block_trials(randperm(size(current_block_trials, 1)), :);
    
    % append to the master shuffled array
    shuffledArray = [shuffledArray; shuffled_block];
end

p.init.trialsArray = shuffledArray;

% --- 5. Add a column to indicate which rows have been completed ---
p.init.trialsArray(:, end+1) = 0;
p.init.trialArrayColumnNames{end+1} = 'completed';

% Create a logical array to draw trials from
p.status.trialsArrayRowsPossible = true(size(p.init.trialsArray, 1), 1);
end

function table = fourFactorsTable
% fourFactorsTable
% Generates the master "recipe" table for the 2-block, 4-factor experiment.
% This table is then passed to initTrialStructure.m to be expanded into
% the final trialsArray.

%% 1. Define Master Recipe Table
% Pre-allocate the master recipe table. 4 half-blocks * 4 locations * 12 stim conditions
table = zeros(4 * 4 * 12, 8);


%% 2. Define the 12 Core Stimulus Conditions
% stimType (1=Face, 2=Non-Face, 3=Spot)
% salience (1=High, 2=Low)
% targetColor (1=ColorA, 2=ColorB)
stim_types    = [1; 1; 1; 1; 2; 2; 2; 2; 3; 3; 3; 3];
saliences     = [1; 1; 2; 2; 1; 1; 2; 2; 1; 1; 2; 2];
target_colors = [1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2];
core_stim_conditions = [stim_types, saliences, target_colors];


%% 3. Build the Recipe Table for Each of the 4 Half-Blocks
current_row = 1;
for i_half_block = 1:4
    if i_half_block <= 2
        high_prob_loc = 1;
    else
        high_prob_loc = 3;
    end
    
    is_first_half_of_block = mod(i_half_block, 2) == 1;

    for i_loc = 1:4
        for i_stim = 1:12
            % Col 1: halfBlock
            table(current_row, 1) = i_half_block;
            % Col 2: targetLocIdx
            table(current_row, 2) = i_loc;
            % Col 3: stimType
            table(current_row, 3) = core_stim_conditions(i_stim, 1);
            % Col 4: salience
            table(current_row, 4) = core_stim_conditions(i_stim, 2);
            % Col 6: targetColor
            table(current_row, 6) = core_stim_conditions(i_stim, 3);
            
            % Col 5: reward
            is_loc_in_high_rwd_hemi = (i_loc <= 2);
            if (is_first_half_of_block && is_loc_in_high_rwd_hemi) || ...
               (~is_first_half_of_block && ~is_loc_in_high_rwd_hemi)
                table(current_row, 5) = 1; % High Reward
            else
                table(current_row, 5) = 2; % Low Reward
            end
            
            % Col 7: numTrials
            if i_loc == high_prob_loc
                table(current_row, 7) = 9;
            else
                table(current_row, 7) = 1;
            end
            
            % Col 8: trialCode
            block_num = ceil(i_half_block / 2);
            half_in_block = mod(i_half_block - 1, 2) + 1;
            stim_index = i_stim;
            table(current_row, 8) = 26000 + (block_num - 1) * 2000 + ...
                (half_in_block - 1) * 1000 + (i_loc - 1) * 100 + stim_index;
                
            current_row = current_row + 1;
        end
    end
end
end